# 进行设定与初始化。
class AxeConfig
  attr_accessor :name
  attr_accessor :workspace
  attr_accessor :scheme
  attr_accessor :testScheme
  attr_accessor :version
  attr_accessor :type
  attr_accessor :dependency
  attr_accessor :podRepo
  def initialize()
    @workspace = nil
    @scheme = nil
    @testScheme = nil
    @dependency = {}
    yield(self)
    if @workspace == nil
      @workspace = @name + ".xcworkspace"
    end
    if @scheme == nil
      @scheme = @name
    end
  end
end

# 解析和检测配置文件。
config_file = "../axe/Axefile.rb"
unless File.exist?(config_file)
  UI.error "请在根目录创建axe文件夹， 然后设置Axefile.rb文件 "
  exit(1)
end
content = File.read config_file
$axeConfig = eval(content)
if $axeConfig.type == "app" && File.exist?('../axe/dependency.json')
  # 对于app类型，从本地读取依赖信息。
  $axeConfig.dependency = JSON.parse(File.read('../axe/dependency.json'))
end
# TODO 检测输入类型是否准确


desc "安装依赖。 对于module和app类型，拥有业务组件依赖，所以必须通过该命令安装依赖。"
desc "**使用axe安装依赖，必须使用Podfile.rb文件，而不是Podfile文件。**"
desc "拥有两个参数："
desc "* `production` : 标记使用prd版本还是beta版本的依赖，默认为 false"
desc "* `source` : 标记是否使用源码引入，默认为 false。"
desc ""
desc "手动安装时，可以快速执行命令： "
desc "```\nfastlane axe_pod_install production:true source:true\n```"
lane :axe_pod_install do |options|
  unless File.exist?("../axe/Podfile.rb")
    UI.error "请在.axe目录创建 Podfile.rb "
    exit(1)
  end
  if $axeConfig.type.eql?('ground')
    UI.message "ground类型，可以直接在本地执行 pod install 命令。"
    # 清理本地的内容 , 这里建议删掉 workspace文件.
    sh("rm -rf ../Podfile.lock ../Pods && rm -rf ../#{$axeConfig.workspace}")
    sh("cp -f ../axe/Podfile.rb ../Podfile")
    cocoapods
    next
  end
  #dev环境
  devPodfile = File.read "../axe/Podfile.rb"
  prdPodfile = File.read "../axe/Podfile.rb"
  devDependency = ""
  prdDependency = ""
  $axeConfig.dependency.each do |key,value|
    dependency = options[:source] ? "#{key}/source" : "#{key}/release"
    if $axeConfig.type.eql?('app')
      devDependency = "#{devDependency}\n  pod '#{dependency}' , '>= #{value}-beta.0', '< #{value}'"
      prdDependency = "#{prdDependency}\n  pod '#{dependency}' , '#{value}'"
    else
      # 模块只依赖 API
      versionSplitted = value.split(".")
      majorVersion = versionSplitted[0].to_i
      minorVersion = versionSplitted[1].to_i
      devDependency = "#{devDependency}\n  pod '#{key}' , '>= #{value}-beta.0', '< #{majorVersion + 1}.0.0'"
      prdDependency = "#{prdDependency}\n  pod '#{key}' , '~> #{majorVersion}.#{minorVersion}'"
    end
  end
  devPodfile = devPodfile.sub('AXE_PODFILE', devDependency)
  prdPodfile = prdPodfile.sub('AXE_PODFILE', prdDependency)
  devFile = File.open("../axe/Podfile.dev.rb","w+")
  devFile.puts(devPodfile)
  devFile.close
  prdFile = File.open("../axe/Podfile.prd.rb","w+")
  prdFile.puts(prdPodfile)
  prdFile.close
  # 切换路径
  Dir.chdir("..") do
    sh("pwd")
    # 清理本地的内容
    sh("rm -rf Podfile.lock Pods")
    # 这里建议删掉 workspace文件. 
    sh("rm -rf #{$axeConfig.workspace}")
    if options[:production]
      sh("cp -f axe/Podfile.prd.rb Podfile")
    else
      sh("cp -f axe/Podfile.dev.rb Podfile")
    end
  end
  sh("pod repo update #{$axeConfig.podRepo}")
  cocoapods
end

# 自动测试， TODO
def axe_auto_test
  put "TODO"
end

# 对于ground项目， 特殊处理其依赖的头文件， 使依赖项目依旧可以正常引入被整合的基础组件。
def axe_handler_ground_headers
  headerDirs = []
  Dir.chdir("Pods/Headers/Public/") do
    sh("rm -rf .axeHeaders && mkdir -p .axeHeaders/dir && mkdir .axeHeaders/src")
    Dir.foreach("./") do |pod|
      # 忽略以 . 开头的隐藏文件
      if File.directory?(pod) && pod[0] != '.'
        # 没有header_dir设置的，直接复制
        sh("echo `cp #{pod}/*.h .axeHeaders/src/`")
        # 特殊处理 header_dir.
        Dir.foreach(pod) do |dir|
          # 忽略以 . 开头的隐藏文件
          if File.directory?("#{pod}/#{dir}") && dir[0] != '.'
            # 特殊处理 header_dir.
            headerDirs << dir
            sh("mkdir .axeHeaders/dir/#{dir} && echo `cp #{pod}/#{dir}/*.h .axeHeaders/dir/#{dir}/`")
          end
        end
      end
    end
  end
  sh("rm -rf axe/Headers && mv Pods/Headers/Public/.axeHeaders axe/Headers")
  dirHeadersSpecs = ""
  headerDirs.each do |dir|
    dirHeadersSpecs += "\n      sss.subspec '#{dir}' do |ssss|\n        ssss.source_files = 'axe/Headers/dir/#{dir}/*.h'\n        ssss.header_dir   = '#{dir}'\n      end"
  end
  return dirHeadersSpecs
end

# module类型打包
def axe_framework 
  #   清理 build目录
  sh("rm -rf ../build")
  #   真机
  xcodebuild(
      workspace: $axeConfig.workspace,
      scheme: $axeConfig.scheme,
      silent: true,
      clean: true,
      build: true,
      configuration: 'Release',
      sdk: "iphoneos",
      derivedDataPath: "build/iphoneos"
    ) 
  # 模拟器
  xcodebuild(
      workspace: $axeConfig.workspace,
      scheme: $axeConfig.scheme,
      silent: true,
      clean: true,
      build: true,
      configuration: 'Release',
      sdk: "iphonesimulator",
      derivedDataPath: "build/iphonesimulator"
    ) 
  # 合并两种架构
  sh("cp -R ../build/iphoneos/Build/Products/Release-iphoneos/#{$axeConfig.scheme}.framework ../build/#{$axeConfig.scheme}.framework")
  sh("lipo -create '../build/iphonesimulator/Build/Products/Release-iphonesimulator/#{$axeConfig.scheme}.framework/#{$axeConfig.scheme}' '../build/#{$axeConfig.scheme}.framework/#{$axeConfig.scheme}' -output '../build/#{$axeConfig.scheme}.framework/#{$axeConfig.scheme}'")
  sh("rm -rf '../axe/#{$axeConfig.scheme}.framework' && cp -R '../build/#{$axeConfig.scheme}.framework' '../axe/#{$axeConfig.scheme}.framework'")
end

@axe_podspec_version_regex = /[\s]*[\w]+\.version[\s]*=[\s]*\"([\w\.\-]*)\"/
# 读取podspec中版本号。
def axe_version_get_podspec(podspecPath)
  matchs = @axe_podspec_version_regex.match(File.read podspecPath) #-> a is MatchData
  if matchs == nil || matchs.length < 2
    UI.error " #{podspecPath} 文件中版本号出错，无法准确读取。"
    exit(1)
  end
  return matchs[1]
end

# 上传 pod到私有仓库
def axe_push_module(production=false)
  newVersion = ''
  newPodspecFile = ''
  Dir.chdir("..") do
    # 这里确保使用 lfs处理大文件。
    sh("echo `git lfs track axe/#{$axeConfig.scheme}.framework/#{$axeConfig.scheme}`")

    # 然后 构建podspec
    podspec = File.read "axe/#{$axeConfig.name}.podspec.rb"
    if production
      newVersion = $axeConfig.version
      if File.exist?("axe/#{$axeConfig.name}.podspec.prd.rb")
        lastVersion = axe_version_get_podspec("axe/#{$axeConfig.name}.podspec.prd.rb")
        if lastVersion.eql?(newVersion)
          UI.error "当前设置版本号 #{$axeConfig.version} 已发布，请检测修改后重试。"
          exit(1)
        end
      end
    else 
      newVersion = "#{$axeConfig.version}-beta.0"
      if File.exist?("axe/#{$axeConfig.name}.podspec.dev.rb")
        lastVersion = axe_version_get_podspec("axe/#{$axeConfig.name}.podspec.dev.rb")
        # 版本号格式为 x.x.x[-beta.x] ,所以先获取前段的版本号。
        strSplit = lastVersion.split('-')
        mainVersion = strSplit[0]
        if strSplit.length > 1
          # 如果有附带版本号，则要进行检测.
          if mainVersion.eql?($axeConfig.version)
            # beta.x
            appendixVersion = strSplit[1]
            versionCode = appendixVersion.split('.')[1].to_i
            newVersion = "#{$axeConfig.version}-beta.#{versionCode + 1}"
          end
        end
      end
    end
    UI.message "更新版本号为 #{newVersion}"
    podspec = podspec.sub('AXE_VERSION', newVersion)
    # 然后更新依赖 ,对于地基项目， 不用设置依赖。
    if $axeConfig.type.eql?('module')
      dependency = ""
      $axeConfig.dependency.each do |key,value|
        versionSplitted = value.split(".")
        majorVersion = versionSplitted[0].to_i
        minorVersion = versionSplitted[1].to_i
        if production
          dependency += "\n  s.dependency '#{key}' , '>= #{value}-beta.0', '< #{majorVersion + 1}.0.0'"
        else
          dependency += "\n  s.dependency '#{key}' , '~> #{majorVersion}.#{minorVersion}'"
        end
      end
      podspec = podspec.sub('AXE_DEPENDENCY', dependency)
    end
    # 对于ground类型，要额外处理 基础组件的header问题。
    if $axeConfig.type.eql?('ground')
      headerSubspecs = axe_handler_ground_headers
      podspec = podspec.sub('AXE_GROUND_HEADERS', headerSubspecs)
    end
    newPodspecFile = "axe/#{$axeConfig.name}.podspec." + (production ? "prd.rb" : "dev.rb")
    file = File.open(newPodspecFile,"w+")
    file.puts(podspec)
    file.close
  end
  # 然后提交版本，以及打tag.
  if git_tag_exists(tag: newVersion)
    UI.error("当前版本 #{newVersion} 已有tag ，无法提交版本，请检测!!!")
    exit(1)
  end
  commitMessage = "axe 自动打包模块 #{$axeConfig.name} , 版本号 : #{newVersion}"
  git_add(path: "axe")
  git_commit(path: "axe", message: commitMessage)
  add_git_tag(tag: newVersion,message: commitMessage)
  push_to_git_remote
  # 将podspec文件移动到仓库中
  sh("cp -f ../#{newPodspecFile} ../#{$axeConfig.name}.podspec")
  pod_push(path: "#{$axeConfig.name}.podspec", repo: $axeConfig.podRepo, allow_warnings: true)
  sh("pod repo update #{$axeConfig.podRepo}")
  # 最后，将API文件， 版本信息， 移动到build文件夹下，供 管理系统记录.
  sh("cp -f ../#{$axeConfig.name}/API/API.h ../build/API.h && echo #{newVersion} > ../build/version.txt")
end

# 分析依赖。
def axe_dependency_analyse
  require 'yaml'
  podInfo = YAML.load_file("../Podfile.lock")
  dependencies = Hash.new
  dependencyVersions = Hash.new
  if podInfo['PODS'] == nil
    return
  end
  podInfo['PODS'].each do |value|
    if  value.class  == Hash
      # 这里只分析依赖的依赖情况。
      value.each do |lib, dependencylist|
        dependencylist.each do |dependency|
          split = lib.split(' ')
          moduleName = split[0].split('/')[0]
          moduleVersion = split[1]
          dependencyVersions[moduleName] = "#{moduleName}#{moduleVersion}"
          split = dependency.split('(')
          dependencyName = split[0].split(' ')[0].split('/')[0]
          unless moduleName.eql?(dependencyName)
            dependencySetting = split.length != 1 ? '(' + split[1] : ''
            dependencies["#{moduleName}#{moduleVersion}|#{dependencyName}"] = dependencySetting
          end
        end
      end
    else
      # 对于只有 string，即无依赖的组件，也要分析其版本号。
      split = value.split(' ')
      moduleName = split[0].split('/')[0]
      moduleVersion = split[1]
      dependencyVersions[moduleName] = "#{moduleName}#{moduleVersion}"
    end
  end
  moduleName = "#{$axeConfig.name}(#{$axeConfig.version})"
  podInfo['DEPENDENCIES'].each do |dependency|
    split = dependency.split('(')
    dependencyName = split[0].split(' ')[0].split('/')[0]
    dependencySetting = split.length != 1 ? '(' + split[1]: ''
    # dependencies[moduleName + '.' + dependencyName] = dependencySetting
    dependencies["#{moduleName}|#{dependencyName}"] = dependencySetting
  end
  # 使用 graphviz 绘图
  dependencies_graph = "digraph G {\n"
  dependencies.each do |dependency,dependencySetting|
    split = dependency.split('|')
    lib = split[0]
    if dependencyVersions.has_key?(lib)
      lib = dependencyVersions[lib]
    end
    depend = split[1]
    if dependencyVersions.has_key?(depend)
      depend = dependencyVersions[depend]
    end
    dependencies_graph += "  \"#{lib}\" -> \"#{depend}\" [ label = \"#{dependencySetting}\" ];\n"
  end 
  dependencies_graph += "}\n"
  dotFile = File.open("../axe/dependency.dot","w+")
  dotFile.puts(dependencies_graph)
  dotFile.close
  sh('dot -Tsvg ../axe/dependency.dot > ../axe/dependency.svg')
end

desc "`axe_module_build` : 构建模块， 打包成framework。 需要先安装Cocoapods依赖。"
desc "**使用axe发布依赖时， 使用的是xxxx.podspec.rb文件，而不是.podpsec文件，需要注意。**"
desc "参数："
desc "* `publish` : 默认为false,避免本地自动测试提交。"
desc "* `production` : 表示发布的版本，需要设定publish。 默认为false, 表示beta版本，会自动增加版本号，注意生产版本只能发布一次。"
desc ""
lane :axe_module_build do |options|
  # 先检测 依赖是否安装
  unless File.exist?("../Podfile.lock")
    UI.error "请先执行 axe_pod_install 命令以安装依赖！！！ "
    exit(1)
  end
  production = options[:production] ? true : false
  publish = options[:publish] ? true : false
  # 如果是ground类型，则先处理header.
  # 打包 
  axe_framework
  # 分析依赖
  axe_dependency_analyse
  # 上传版本
  axe_push_module(production) if publish
end

desc "`axe_import_module` : 负责APP中接入 组件模块。"
desc "使用 Podfile.rb文件！！ "
desc "参数："
desc "import : 新引入模块，json字符串，如 {\"a\":\"1.1.1\"} ， key为模块名，value为版本号"
desc "remove : 删除的模块，json字符串，如 [\"a\",\"b\"] "
lane :axe_import_module do |options|
  changeCount = 0 # 统计变更内容数量，如果没有变更，则报错。
  importModules = options[:import] ? JSON.parse(options[:import]) : Hash.new
  removeModules = options[:remove] ? JSON.parse(options[:remove]) : []
  message = "axe 自动接入模块 ："
  oldDependency = $axeConfig.dependency
  importModules.each do |moduleName, version|
    if oldDependency.has_key?(moduleName)
      oldVersion = oldDependency[moduleName]
      unless oldVersion.eql?(version)
        message += "\n #{moduleName} : #{oldVersion} => #{version} "
        changeCount += 1
      end
    else
      message += "\n #{moduleName} : 新模块，版本号为 #{version} "
      changeCount += 1
    end
    oldDependency[moduleName] = version
  end
  newDependency = oldDependency.clone
  removeModules.each do |moduleName|
    if newDependency.has_key?(moduleName)
      newDependency.delete(moduleName)
      changeCount += 1
    else
      UI.message "无法删除模块#{moduleName}， 当前并没有引入该模块！"
    end
  end
  # 由于jenkins构建后， 进行数据库操作，为了避免数据库操作出错，而jenkins已提交， 所以我们不做这个检测，而是如果没有变更，则不进行git提交操作。
  # if changeCount == 0
  #   UI.error "并没有新模块引入或者版本升级， 请检查输入！！！ "
  #   exit(1)
  # end
  $axeConfig.dependency = newDependency
  # 安装依赖
  axe_pod_install
  # 整合后，分析APP的依赖情况。
  axe_dependency_analyse
  # 分析完成后，保存本地dependency文件
  dependencyFile = File.open('../axe/dependency.json',"w+")
  dependencyFile.puts(JSON.generate(newDependency))
  dependencyFile.close
  # 最后，提交git
  if changeCount > 0
    git_add(path: "axe")
    git_commit(path: "axe", message: message)
    push_to_git_remote
  end
end

desc "`axe_init_module` : 脚手架模式，以快速搭建一个标准的module"
desc "TODO 暂时不会实现。"
desc "参数："
desc ""
lane :axe_init_module do |options|
  puts "TODO"
end
